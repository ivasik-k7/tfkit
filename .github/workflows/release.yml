name: Build Multi-Format Release

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: tfkit-linux
            binary_name: tfkit
            platform: linux
          - os: macos-latest
            name: tfkit-macos
            binary_name: tfkit
            platform: macos
          - os: windows-latest
            name: tfkit-windows.exe
            binary_name: tfkit.exe
            platform: windows

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv .venv
          echo "Virtual environment created"

      - name: Install project and PyInstaller (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          uv pip install pyinstaller
          uv pip install .
          python --version
          pip list

      - name: Install project and PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          uv pip install pyinstaller
          uv pip install .
          python --version
          pip list

      - name: Build binary with PyInstaller (Unix)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          pyinstaller --onefile \
            --name ${{ matrix.binary_name }} \
            --collect-data hcl2 \
            --collect-all hcl2 \
            --hidden-import=hcl2 \
            --hidden-import=lark \
            --hidden-import=lark.lark \
            src/tfkit/cli.py
          echo "‚úÖ Binary built successfully for ${{ matrix.platform }}!"
          ls -lh dist/

      - name: Build binary with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          .venv\Scripts\activate
          pyinstaller --onefile --name ${{ matrix.binary_name }} --collect-data hcl2 --collect-all hcl2 --hidden-import=hcl2 --hidden-import=lark --hidden-import=lark.lark src/tfkit/cli.py
          echo "‚úÖ Binary built successfully for ${{ matrix.platform }}!"
          dir dist

      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x dist/${{ matrix.binary_name }}
          dist/${{ matrix.binary_name }} --version || echo "Version check completed"

      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          dist\${{ matrix.binary_name }} --version
        continue-on-error: true

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/${{ matrix.binary_name }}
          if-no-files-found: error

  build-python-packages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Verify pyproject.toml
        run: |
          echo "Checking pyproject.toml..."
          cat pyproject.toml
          echo "‚úÖ pyproject.toml verified"

      - name: Build Python packages with uv
        run: |
          uv build --verbose
          echo "‚úÖ Python packages built successfully!"

      - name: List built packages
        run: |
          echo "Built packages:"
          ls -lh dist/

      - name: Verify package contents
        run: |
          uv tool install twine
          uv tool run twine check dist/*
          echo "‚úÖ Package verification passed"

      - name: Upload Python packages
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/*
          if-no-files-found: error

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: [build-python-packages]
    environment:
      name: pypi
      url: https://pypi.org/project/tfkit-py/

    steps:
      - name: Download Python packages artifact
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist

      - name: List downloaded packages for verification
        run: |
          echo "Downloaded packages ready for upload:"
          ls -lh dist/

      - name: Publish package to PyPI üöÄ
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-python-packages, publish-to-pypi]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets-temp

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          echo "Artifact structure:"
          find release-assets-temp -type f

          echo ""
          echo "Moving and renaming files to release-assets..."

          if [ -d "release-assets-temp/tfkit-linux" ]; then
            mv release-assets-temp/tfkit-linux/tfkit release-assets/tfkit-linux
            chmod +x release-assets/tfkit-linux
          fi

          if [ -d "release-assets-temp/tfkit-macos" ]; then
            mv release-assets-temp/tfkit-macos/tfkit release-assets/tfkit-macos
            chmod +x release-assets/tfkit-macos
          fi

          if [ -d "release-assets-temp/tfkit-windows.exe" ]; then
            mv release-assets-temp/tfkit-windows.exe/tfkit.exe release-assets/tfkit-windows.exe
          fi

          if [ -d "release-assets-temp/python-packages" ]; then
            cp release-assets-temp/python-packages/* release-assets/
          fi

          echo ""
          echo "Cleaning up temp directory..."
          rm -rf release-assets-temp

      - name: List all release assets
        run: |
          echo "=== Final Release Assets ==="
          ls -lh release-assets/
          echo ""
          echo "Total files: $(find release-assets -type f | wc -l)"

      - name: Verify all expected binary files exist
        run: |
          error=0

          if [ ! -f "release-assets/tfkit-linux" ]; then
            echo "‚ùå Missing Linux binary"
            error=1
          else
            echo "‚úÖ Linux binary present"
          fi

          if [ ! -f "release-assets/tfkit-macos" ]; then
            echo "‚ùå Missing macOS binary"
            error=1
          else
            echo "‚úÖ macOS binary present"
          fi

          if [ ! -f "release-assets/tfkit-windows.exe" ]; then
            echo "‚ùå Missing Windows binary"
            error=1
          else
            echo "‚úÖ Windows binary present"
          fi

          if [ $error -eq 0 ]; then
            echo "‚úÖ All expected binaries present"
          else
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
